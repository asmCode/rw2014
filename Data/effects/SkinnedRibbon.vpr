#version 400

layout (location = 0) in vec3 a_position;
layout (location = 1) in uvec4 a_boneIndex;
layout (location = 2) in vec4 a_weight;

layout (location = 3) in vec4 a_color;
layout (location = 4) in float a_glowPower;

layout (location = 5) in mat4 a_transform;

uniform mat4 u_viewProjMatrix;
uniform vec3 u_lightPosition;
uniform vec3 u_eyePosition;
uniform mat4 u_boneTransform[41];
uniform float u_ribbonWeight; // 0.0 = bones, 1.0 = ribbon

varying vec4 o_color;
varying vec3 o_normal;
varying vec3 o_lightDirection;
varying vec3 o_eyeDirection;
varying float o_glowPower;

void main()
{	
	o_color = a_color;
	o_normal = vec3(1, 0, 0);
	o_glowPower = a_glowPower;
	
	//o_lightDirection = u_lightPosition - worldPosition.xyz;
	//o_eyeDirection = u_eyePosition - worldPosition.xyz;

	
	vec4 worldPosition = vec4(a_position, 1);

	vec4 finalWorldPosition = u_boneTransform[a_boneIndex.x] * worldPosition * a_weight.x;
	finalWorldPosition += u_boneTransform[a_boneIndex.y] * worldPosition * a_weight.y;
	finalWorldPosition += u_boneTransform[a_boneIndex.z] * worldPosition * a_weight.z;
	finalWorldPosition += u_boneTransform[a_boneIndex.w] * worldPosition * a_weight.w;	

	finalWorldPosition = mix(finalWorldPosition, a_transform * worldPosition, u_ribbonWeight);
	
	/*
	mat4 bonesTransform = u_boneTransform[a_boneIndex.x] * a_weight.x;
	bonesTransform += u_boneTransform[a_boneIndex.y] * a_weight.y;
	bonesTransform += u_boneTransform[a_boneIndex.z] * a_weight.z;
	bonesTransform += u_boneTransform[a_boneIndex.w] * a_weight.w;

	vec4 finalWorldPosition = bonesTransform * vec4(a_position, 1);
	*/
	
	gl_Position = u_viewProjMatrix * finalWorldPosition;
}
